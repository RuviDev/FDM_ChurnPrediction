"""
app.py

This module defines a Streamlit application for predicting credit card
customer churn using a pre‑trained XGBoost model.  The UI allows users
to choose between single‑customer prediction and batch prediction via file
upload.  It also displays the top feature importances and provides
model metrics on the sidebar.  The app relies on the `churn_xgb_model.joblib`
file generated by `train_model.py` and the helper functions in
`predict.py`.

To run the app you need to install Streamlit and its dependencies.  From
the project root, run:

```bash
pip install streamlit
streamlit run software_solution/app.py
```

Streamlit simplifies building interactive ML apps by offering a minimal API
for creating widgets and handling user input.  As discussed in a Docker
blog, Streamlit makes it easy to build UI components for ML models without
needing to handle backend routes or complex HTML【643571009368409†L139-L151】.  The blog also
highlights how the sidebar can be used to switch between online (single)
and batch scoring modes【643571009368409†L360-L369】, which we adopt here.
"""

import os
import joblib
import pandas as pd
import numpy as np
import streamlit as st

from predict import predict_one, predict_batch, EXPECTED_COLS


@st.cache_resource
def load_model(model_path: str):
    """Load the trained pipeline with Streamlit caching."""
    return joblib.load(model_path)


def numeric_input(col_name: str):
    """Helper to render a numeric input widget with a sensible default."""
    return st.number_input(col_name, value=0.0)


def categorical_input(col_name: str):
    """Helper to render a text input widget for categorical fields."""
    return st.text_input(col_name)


def run_app() -> None:
    st.set_page_config(page_title="Credit Card Churn Predictor", layout="centered")
    st.title("Credit Card Customer Churn Predictor")

    # Load model
    model_path = os.path.join("software_solution", "churn_xgb_model.joblib")
    model = load_model(model_path)

    # Sidebar for navigation and settings
    st.sidebar.header("Options")
    mode = st.sidebar.selectbox("Prediction mode", ("Single Customer", "Batch Upload"))
    threshold = st.sidebar.slider(
        "Decision threshold", min_value=0.0, max_value=1.0, value=0.50, step=0.01
    )
    st.sidebar.markdown("**Threshold explanation:** predictions above this value are classified as churn.")

    # Display feature importance image if present
    importance_image_path = os.path.join("software_solution", "feature_importance.png")
    if os.path.exists(importance_image_path):
        st.sidebar.image(importance_image_path, caption="Top 15 Feature Importances")

    # Main content
    if mode == "Single Customer":
        st.subheader("Enter Customer Details")
        input_data = {}
        for col in EXPECTED_COLS:
            if col in [
                "Customer_Age",
                "Dependent_count",
                "Months_on_book",
                "Total_Relationship_Count",
                "Months_Inactive_12_mon",
                "Contacts_Count_12_mon",
                "Credit_Limit",
                "Total_Revolving_Bal",
                "Avg_Open_To_Buy",
                "Total_Amt_Chng_Q4_Q1",
                "Total_Trans_Amt",
                "Total_Trans_Ct",
                "Total_Ct_Chng_Q4_Q1",
                "Avg_Utilization_Ratio",
            ]:
                input_data[col] = numeric_input(col)
            else:
                input_data[col] = categorical_input(col)
        if st.button("Predict"):
            result = predict_one(model, input_data, threshold=threshold)
            st.write(f"Churn probability: {result['churn_probability']:.4f}")
            if result["predicted_label"] == 1:
                st.success("Prediction: Churn")
            else:
                st.info("Prediction: Not Churn")
    else:
        st.subheader("Batch Prediction")
        uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])
        if uploaded_file is not None:
            # Read uploaded data
            df_uploaded = pd.read_csv(uploaded_file)
            st.write("Data Preview:")
            st.dataframe(df_uploaded.head())
            if st.button("Run Batch Prediction"):
                # Save uploaded to temp file
                temp_input = "temp_batch_input.csv"
                df_uploaded.to_csv(temp_input, index=False)
                temp_output = "temp_batch_output.csv"
                result_df = predict_batch(model, temp_input, temp_output, threshold=threshold)
                st.write(result_df.head())
                with open(temp_output, "rb") as f:
                    st.download_button(
                        label="Download Predictions",
                        data=f,
                        file_name="churn_predictions.csv",
                        mime="text/csv",
                    )
                # Clean up temp files
                os.remove(temp_input)
                os.remove(temp_output)

    st.write("\n")
    st.markdown("---")
    st.markdown(
        "*This app uses a tuned XGBoost model trained on the Kaggle BankChurners dataset."
        " The preprocessing pipeline standardizes numeric features and one‑hot encodes categorical"
        " features with `handle_unknown='ignore'` to safely handle new categories at inference."
    )


if __name__ == "__main__":
    run_app()